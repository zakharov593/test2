/*
 * OpenWeatherMap API
 *
 * Get the current weather, daily forecast for 16 days, and a three-hour-interval forecast for 5 days for your city. Helpful stats, graphics, and this day in history charts are available for your reference. Interactive maps show precipitation, clouds, pressure, wind around your location stations. Data is available in JSON, XML, or HTML format. **Note**: This sample Swagger file covers the `current` endpoint only from the OpenWeatherMap API. <br/><br/> **Note**: All parameters are optional, but you must select at least one parameter. Calling the API by city ID (using the `id` parameter) will provide the most precise location results.
 *
 * OpenAPI spec version: 1.0.2
 * Contact: some_email@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Model200 : IEquatable<Model200>
    { 
        /// <summary>
        /// Gets or Sets Coord
        /// </summary>
        [DataMember(Name="coord")]
        public Coord Coord { get; set; }

        /// <summary>
        /// (more info Weather condition codes)
        /// </summary>
        /// <value>(more info Weather condition codes)</value>
        [DataMember(Name="weather")]
        public List<Weather> Weather { get; set; }

        /// <summary>
        /// Internal parameter
        /// </summary>
        /// <value>Internal parameter</value>
        [DataMember(Name="base")]
        public string Base { get; set; }

        /// <summary>
        /// Gets or Sets Main
        /// </summary>
        [DataMember(Name="main")]
        public Main Main { get; set; }

        /// <summary>
        /// Visibility, meter
        /// </summary>
        /// <value>Visibility, meter</value>
        [DataMember(Name="visibility")]
        public int? Visibility { get; set; }

        /// <summary>
        /// Gets or Sets Wind
        /// </summary>
        [DataMember(Name="wind")]
        public Wind Wind { get; set; }

        /// <summary>
        /// Gets or Sets Clouds
        /// </summary>
        [DataMember(Name="clouds")]
        public Clouds Clouds { get; set; }

        /// <summary>
        /// Gets or Sets Rain
        /// </summary>
        [DataMember(Name="rain")]
        public Rain Rain { get; set; }

        /// <summary>
        /// Gets or Sets Snow
        /// </summary>
        [DataMember(Name="snow")]
        public Snow Snow { get; set; }

        /// <summary>
        /// Time of data calculation, unix, UTC
        /// </summary>
        /// <value>Time of data calculation, unix, UTC</value>
        [DataMember(Name="dt")]
        public int? Dt { get; set; }

        /// <summary>
        /// Gets or Sets Sys
        /// </summary>
        [DataMember(Name="sys")]
        public Sys Sys { get; set; }

        /// <summary>
        /// City ID
        /// </summary>
        /// <value>City ID</value>
        [DataMember(Name="id")]
        public int? Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// Internal parameter
        /// </summary>
        /// <value>Internal parameter</value>
        [DataMember(Name="cod")]
        public int? Cod { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Model200 {\n");
            sb.Append("  Coord: ").Append(Coord).Append("\n");
            sb.Append("  Weather: ").Append(Weather).Append("\n");
            sb.Append("  Base: ").Append(Base).Append("\n");
            sb.Append("  Main: ").Append(Main).Append("\n");
            sb.Append("  Visibility: ").Append(Visibility).Append("\n");
            sb.Append("  Wind: ").Append(Wind).Append("\n");
            sb.Append("  Clouds: ").Append(Clouds).Append("\n");
            sb.Append("  Rain: ").Append(Rain).Append("\n");
            sb.Append("  Snow: ").Append(Snow).Append("\n");
            sb.Append("  Dt: ").Append(Dt).Append("\n");
            sb.Append("  Sys: ").Append(Sys).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Cod: ").Append(Cod).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Model200)obj);
        }

        /// <summary>
        /// Returns true if Model200 instances are equal
        /// </summary>
        /// <param name="other">Instance of Model200 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Model200 other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Coord == other.Coord ||
                    Coord != null &&
                    Coord.Equals(other.Coord)
                ) && 
                (
                    Weather == other.Weather ||
                    Weather != null &&
                    Weather.SequenceEqual(other.Weather)
                ) && 
                (
                    Base == other.Base ||
                    Base != null &&
                    Base.Equals(other.Base)
                ) && 
                (
                    Main == other.Main ||
                    Main != null &&
                    Main.Equals(other.Main)
                ) && 
                (
                    Visibility == other.Visibility ||
                    Visibility != null &&
                    Visibility.Equals(other.Visibility)
                ) && 
                (
                    Wind == other.Wind ||
                    Wind != null &&
                    Wind.Equals(other.Wind)
                ) && 
                (
                    Clouds == other.Clouds ||
                    Clouds != null &&
                    Clouds.Equals(other.Clouds)
                ) && 
                (
                    Rain == other.Rain ||
                    Rain != null &&
                    Rain.Equals(other.Rain)
                ) && 
                (
                    Snow == other.Snow ||
                    Snow != null &&
                    Snow.Equals(other.Snow)
                ) && 
                (
                    Dt == other.Dt ||
                    Dt != null &&
                    Dt.Equals(other.Dt)
                ) && 
                (
                    Sys == other.Sys ||
                    Sys != null &&
                    Sys.Equals(other.Sys)
                ) && 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Cod == other.Cod ||
                    Cod != null &&
                    Cod.Equals(other.Cod)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Coord != null)
                    hashCode = hashCode * 59 + Coord.GetHashCode();
                    if (Weather != null)
                    hashCode = hashCode * 59 + Weather.GetHashCode();
                    if (Base != null)
                    hashCode = hashCode * 59 + Base.GetHashCode();
                    if (Main != null)
                    hashCode = hashCode * 59 + Main.GetHashCode();
                    if (Visibility != null)
                    hashCode = hashCode * 59 + Visibility.GetHashCode();
                    if (Wind != null)
                    hashCode = hashCode * 59 + Wind.GetHashCode();
                    if (Clouds != null)
                    hashCode = hashCode * 59 + Clouds.GetHashCode();
                    if (Rain != null)
                    hashCode = hashCode * 59 + Rain.GetHashCode();
                    if (Snow != null)
                    hashCode = hashCode * 59 + Snow.GetHashCode();
                    if (Dt != null)
                    hashCode = hashCode * 59 + Dt.GetHashCode();
                    if (Sys != null)
                    hashCode = hashCode * 59 + Sys.GetHashCode();
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (Cod != null)
                    hashCode = hashCode * 59 + Cod.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Model200 left, Model200 right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Model200 left, Model200 right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
