/*
 * OpenWeatherMap API
 *
 * Get the current weather, daily forecast for 16 days, and a three-hour-interval forecast for 5 days for your city. Helpful stats, graphics, and this day in history charts are available for your reference. Interactive maps show precipitation, clouds, pressure, wind around your location stations. Data is available in JSON, XML, or HTML format. **Note**: This sample Swagger file covers the `current` endpoint only from the OpenWeatherMap API. <br/><br/> **Note**: All parameters are optional, but you must select at least one parameter. Calling the API by city ID (using the `id` parameter) will provide the most precise location results.
 *
 * OpenAPI spec version: 1.0.2
 * Contact: some_email@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;
using IO.Swagger.Security;
using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class CurrentWeatherDataApiController : ControllerBase
    { 
        /// <summary>
        /// Call current weather data for one location.
        /// </summary>
        /// <remarks>Access current weather data for any location on Earth including over 200,000 cities! Current weather is frequently updated based on global models and data from more than 40,000 weather stations.</remarks>
        /// <param name="appid">your unique API key, used to authenticate you as a legitimate user</param>
        /// <param name="q">**City name**. *Example: London*. You can call by city name, or by city name and country code. The API responds with a list of results that match a searching word. For the query value, type the city name and optionally the country code divided by a comma; use ISO 3166 country codes.</param>
        /// <param name="id">**City ID**. *Example: &#x60;2172797&#x60;*. You can call by city ID. The API responds with the exact result. The List of city IDs can be downloaded [here](http://bulk.openweathermap.org/sample/). You can include multiple cities in this parameter &amp;mdash; just separate them by commas. The limit of locations is 20. *Note: A single ID counts as a one API call. So, if you have city IDs, it&#x27;s treated as 3 API calls.*</param>
        /// <param name="lat">**Latitude**. *Example: 35*. The latitude coordinate of the location of your interest. Must use with &#x60;lon&#x60;.</param>
        /// <param name="lon">**Longitude**. *Example: 139*. Longitude coordinate of the location of your interest. Must use with &#x60;lat&#x60;.</param>
        /// <param name="zip">**Zip code**. Search by zip code. *Example: 95050,us*. Please note that if the country is not specified, the search uses USA as a default.</param>
        /// <param name="units">**Units**. *Example: imperial*. Possible values: &#x60;standard&#x60;, &#x60;metric&#x60;, and &#x60;imperial&#x60;. When you do not use the &#x60;units&#x60; parameter, the format is &#x60;standard&#x60; by default.</param>
        /// <param name="lang">**Language**. *Example: en*. You can use lang parameter to get the output in your language. We support the following languages that you can use with the corresponded lang values: Arabic - &#x60;ar&#x60;, Bulgarian - &#x60;bg&#x60;, Catalan - &#x60;ca&#x60;, Czech - &#x60;cz&#x60;, German - &#x60;de&#x60;, Greek - &#x60;el&#x60;, English - &#x60;en&#x60;, Persian (Farsi) - &#x60;fa&#x60;, Finnish - &#x60;fi&#x60;, French - &#x60;fr&#x60;, Galician - &#x60;gl&#x60;, Croatian - &#x60;hr&#x60;, Hungarian - &#x60;hu&#x60;, Italian - &#x60;it&#x60;, Japanese - &#x60;ja&#x60;, Korean - &#x60;kr&#x60;, Latvian - &#x60;la&#x60;, Lithuanian - &#x60;lt&#x60;, Macedonian - &#x60;mk&#x60;, Dutch - &#x60;nl&#x60;, Polish - &#x60;pl&#x60;, Portuguese - &#x60;pt&#x60;, Romanian - &#x60;ro&#x60;, Russian - &#x60;ru&#x60;, Swedish - &#x60;se&#x60;, Slovak - &#x60;sk&#x60;, Slovenian - &#x60;sl&#x60;, Spanish - &#x60;es&#x60;, Turkish - &#x60;tr&#x60;, Ukrainian - &#x60;ua&#x60;, Vietnamese - &#x60;vi&#x60;, Chinese Simplified - &#x60;zh_cn&#x60;, Chinese Traditional - &#x60;zh_tw&#x60;.</param>
        /// <param name="mode">**Mode**. *Example: html*. Determines the format of the response. Possible values are &#x60;xml&#x60; and &#x60;html&#x60;. If the mode parameter is empty, the format is &#x60;json&#x60; by default.</param>
        /// <response code="200">Successful response</response>
        /// <response code="404">Not found response</response>
        [HttpGet]
        [Route("/data/2.5//weather")]
        [Authorize(AuthenticationSchemes = ApiKeyAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("CurrentWeatherData")]
        [SwaggerResponse(statusCode: 200, type: typeof(Model200), description: "Successful response")]
        [SwaggerResponse(statusCode: 404, type: typeof(string), description: "Not found response")]
        public virtual IActionResult CurrentWeatherData([FromQuery]string appid, [FromQuery]string q, [FromQuery]string id, [FromQuery]string lat, [FromQuery]string lon, [FromQuery]string zip, [FromQuery]string units, [FromQuery]string lang, [FromQuery]string mode)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Model200));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(string));
            string exampleJson = null;
            exampleJson = "{\n  \"rain\" : {\n    \"3h\" : 3\n  },\n  \"visibility\" : 16093,\n  \"main\" : {\n    \"temp\" : 293.25,\n    \"temp_min\" : 289.82,\n    \"grnd_level\" : 990.0,\n    \"humidity\" : 83,\n    \"pressure\" : 1019,\n    \"sea_level\" : 984,\n    \"temp_max\" : 295.37\n  },\n  \"clouds\" : {\n    \"all\" : 75\n  },\n  \"sys\" : {\n    \"country\" : \"AU\",\n    \"sunrise\" : 1435610796,\n    \"sunset\" : 1435650870,\n    \"id\" : 8166,\n    \"type\" : 1,\n    \"message\" : 0.0166\n  },\n  \"dt\" : 1435658272,\n  \"coord\" : {\n    \"lon\" : 145.77,\n    \"lat\" : -16.92\n  },\n  \"snow\" : {\n    \"3h\" : 6\n  },\n  \"weather\" : [ {\n    \"icon\" : \"04n\",\n    \"description\" : \"broken clouds\",\n    \"main\" : \"Clouds\",\n    \"id\" : 803\n  }, {\n    \"icon\" : \"04n\",\n    \"description\" : \"broken clouds\",\n    \"main\" : \"Clouds\",\n    \"id\" : 803\n  } ],\n  \"name\" : \"Cairns\",\n  \"cod\" : 200,\n  \"id\" : 2172797,\n  \"base\" : \"cmc stations\",\n  \"wind\" : {\n    \"deg\" : 150,\n    \"speed\" : 5.1\n  }\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<Model200>(exampleJson)
                        : default(Model200);            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
